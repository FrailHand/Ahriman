# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import server_proto_pb2 as server__proto__pb2


class GameStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GameStream = channel.stream_stream(
        '/Game/GameStream',
        request_serializer=server__proto__pb2.GameMessage.SerializeToString,
        response_deserializer=server__proto__pb2.GameMessage.FromString,
        )
    self.RoomRequest = channel.stream_stream(
        '/Game/RoomRequest',
        request_serializer=server__proto__pb2.RoomRequestMessage.SerializeToString,
        response_deserializer=server__proto__pb2.RoomResponse.FromString,
        )
    self.RoomCheck = channel.unary_unary(
        '/Game/RoomCheck',
        request_serializer=server__proto__pb2.RoomRequestMessage.SerializeToString,
        response_deserializer=server__proto__pb2.RoomResponse.FromString,
        )


class GameServicer(object):
  """Interface exported by the server.
  """

  def GameStream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RoomRequest(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RoomCheck(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GameServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GameStream': grpc.stream_stream_rpc_method_handler(
          servicer.GameStream,
          request_deserializer=server__proto__pb2.GameMessage.FromString,
          response_serializer=server__proto__pb2.GameMessage.SerializeToString,
      ),
      'RoomRequest': grpc.stream_stream_rpc_method_handler(
          servicer.RoomRequest,
          request_deserializer=server__proto__pb2.RoomRequestMessage.FromString,
          response_serializer=server__proto__pb2.RoomResponse.SerializeToString,
      ),
      'RoomCheck': grpc.unary_unary_rpc_method_handler(
          servicer.RoomCheck,
          request_deserializer=server__proto__pb2.RoomRequestMessage.FromString,
          response_serializer=server__proto__pb2.RoomResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Game', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class AuthStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Authentication = channel.unary_unary(
        '/Auth/Authentication',
        request_serializer=server__proto__pb2.AuthRequest.SerializeToString,
        response_deserializer=server__proto__pb2.AuthResponse.FromString,
        )


class AuthServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Authentication(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Authentication': grpc.unary_unary_rpc_method_handler(
          servicer.Authentication,
          request_deserializer=server__proto__pb2.AuthRequest.FromString,
          response_serializer=server__proto__pb2.AuthResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Auth', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
